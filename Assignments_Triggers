
--1--
Create a trigger on the Contact object that calculates and updates the Total_Contacts__c field on the related Account whenever Contacts are added, updated or deleted. Handle bulk updates efficiently.

trigger ContactTrigger on Contact (after insert, after update, after delete, after undelete) {
    // Set to store Account Ids
    Set<Id> accountIds = new Set<Id>();
    
    // Collect Account Ids from new and old Contact records
    if (Trigger.isInsert || Trigger.isUpdate || Trigger.isUndelete) {
        for (Contact con : Trigger.new) {
            accountIds.add(con.AccountId);
        }
    }
    
    //During an update operation, a Contact's AccountId can change. For example, a Contact might be reassigned from one Account to another. For that reason we are collecting ID again for 'isUpdate'
    if (Trigger.isUpdate || Trigger.isDelete) {
        for (Contact con : Trigger.old) {
            accountIds.add(con.AccountId);
        }
    }

    // Remove null values (in case AccountId is not set)
    accountIds.remove(null);

    // Map to store Account Ids and their contact counts
    Map<Id, Integer> accountContactCountMap = new Map<Id, Integer>();

    // Query the total number of Contacts for each Account
    if (!accountIds.isEmpty()) {
        List<AggregateResult> contactCounts = [
            SELECT AccountId, COUNT(Id) contactCount
            FROM Contact
            WHERE AccountId IN :accountIds
            GROUP BY AccountId
        ];
        
        // Store the contact counts in the map
        for (AggregateResult ar : contactCounts) {
            accountContactCountMap.put((Id)ar.get('AccountId'), (Integer)ar.get('contactCount'));
        }
    }

    // List to store Accounts to be updated
    List<Account> accountsToUpdate = new List<Account>();

    // Add Accounts with their updated contact counts
    for (Id accountId : accountIds) {
        Integer contactCount = accountContactCountMap.containsKey(accountId) ? accountContactCountMap.get(accountId) : 0;
        accountsToUpdate.add(new Account(Id = accountId, Number_Of_Contacts__c = contactCount));
    }

    // Update the Account records
    if (!accountsToUpdate.isEmpty()) {
        update accountsToUpdate;
    }
}






--2--
Write a trigger on the Opportunity object that validates if the StageName is set to "Closed Won", the related Account must have a value for BillingAddress. Prevent the operation if the condition is not met.

trigger Trigger2 on Opportunity (before insert, before update) {
	Set<Id> accIds = new Set<Id>();
    
    if(Trigger.isInsert || Trigger.isUpdate){
        for(Opportunity opp : Trigger.New){
        	accIds.add(opp.AccountId);
    	}
    }
    
   	Map<Id, Account> accMap = new Map<Id, Account>([SELECT Id, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry FROM Account WHERE Id IN : accIds]);
    
    for(Opportunity op : Trigger.New){
        if(op.StageName == 'Closed Won'){
            Account acc = accMap.get(op.AccountId);
            
            if(acc.BillingStreet == null || acc.BillingCity == null || acc.BillingState == null || acc.BillingPostalCode == null || acc.BillingCountry == null) { 
                    op.addError('Cannot mark Opportunity as Closed Won without a complete Billing Address on the related Account.');
            }
            
        }	
    }
    
    
}





--3--
Trigger to find all related opportunities amounts of an account

trigger OpportunityTrigger on Opportunity (before insert, after insert, before update, after update, before delete, after delete, after undelete) {
    Set<Id> accIds = new Set<Id>();
    if(Trigger.isBefore){
        
    }
    if(Trigger.isAfter){
        if(Trigger.isInsert || Trigger.isUndelete){
            for(Opportunity opp : Trigger.New){
                accIds.add(opp.AccountId);
            }
        }
        if(Trigger.isUpdate){
            for(Opportunity opp : Trigger.New){
                if(opp.AccountId != Trigger.oldMap.get(opp.Id).AccountId){
                    accIds.add(opp.AccountId);
                   	accIds.add(Trigger.oldMap.get(opp.Id).AccountId);
                }
                else{
                    accIds.add(opp.AccountId);
                }
            }
        }
        if(Trigger.isDelete){
            for(Opportunity opp : Trigger.Old){
                accIds.add(Trigger.OldMap.get(opp.Id).AccountId);
            }
        }
    }
    
    if(! accIds.isEmpty()){
        List<AggregateResult> aggrList = [SELECT AccountId ids, SUM(Amount) totalAmount FROM Opportunity WHERE AccountId IN :accIds GROUP BY AccountId];
        Map<Id, Account> accMap = new Map<Id, Account>();
        if(! aggrList.isEmpty()){
            for(AggregateResult aggr : aggrList){
                Account acc = new Account(
                Id = (Id)aggr.get('ids'),
                Total_Opportunity_Amount__c = (Decimal)aggr.get('totalAmount')
                );
                accMap.put(acc.Id, acc);
            }
        }
        
        if(! accMap.isEmpty()){
            update accMap.values();
                
        }
    }
}





--5--
// Write a trigger on contact to prevent duplicate records based on Contact Email.

public static void Trigger37BeforeInsert(List<Contact> ctslst){
        List<String> FirstNameLst = new List<String>();
        List<String> LastNameLst = new List<String>();
        List<String> MobilePhoneLst = new List<String>();
        
        for(Contact con : ctslst){
            FirstNameLst.add(con.FirstName);
            LastNameLst.add(con.LastName);
            MobilePhoneLst.add(con.MobilePhone);
        }
        
        List<Contact> RedundantContacts = [SELECT Id, FirstName, LastName, MobilePhone FROM Contact WHERE FirstName IN :FirstNameLst AND LastName IN :LastNameLst AND MobilePhone IN :MobilePhoneLst];
        
        Map<String, Id> RedundantCTSKeys = new Map<String, Id>();
        for(Contact con : RedundantContacts){
            RedundantCTSKeys.put((con.FirstName+con.LastName+con.MobilePhone), con.Id);
        }
        
        for(Contact con : ctslst){
            if(RedundantCTSKeys.ContainsKey(con.FirstName+con.LastName+con.MobilePhone)){
                con.addError('The contact with same Name and Mobile Number already exists. DUPLICATE !!!');
            }
        }
    }






--6--
// When a Opportunity Stage (field) is changed, create a Task record on Opportunity and assign it to Logged In User/Opportunity Owner Any User.

    public static void Trigger22AfterUpdate(List<Opportunity> opplst, Map<Id, Opportunity> oppMap){
        // Task list to store new tasks
        List<Task> tsklst = new List<Task>();
        
        // Iterating through each Opportunity
        for(Opportunity opp : opplst){
            Opportunity op = oppMap.get(opp.Id);
            
            // Checking the Stage must have been changed
            if(opp.StageName != op.StageName){
                
                Task tsk = new Task
                    (
                WhatId = opp.Id,
                Subject = 'Follow Up on Opportunity Stage Change',
                Status = 'Not Started',
                Priority = 'Normal',
                OwnerId = opp.OwnerId
                    );
                
                // Adding Tasks in to te task List
                tsklst.add(tsk);
            }
        }
        
        // Inserting new task lists
        if(! tsklst.isEmpty()){
            insert tsklst;
        }
    }





--7--
// If an opportunity is closed then, no one should be able to delete it except the user having a System Administrator profile.

    public static void Trigger29BeforeDelete(List<Opportunity> opplst){
        
        // Fetching profile information of current user
        String currentUserProfile = [SELECT Profile.Name FROM User WHERE Id =: UserInfo.getUserId()].Profile.Name;
        
        // Iterating through each Opportunity
        for(Opportunity opp : opplst){
            
            // Checking Opportunity stage must be closed and user must not be Admin
            if((opp.StageName == 'Closed Won' || opp.StageName == 'Closed Lost') && (currentUserProfile != 'System Administrator')){
                opp.addError('Only Administrator can delete this record');
            }
        }
    }





--8--
// Prevent deletion of an account if there is any Opportunity related to that account.

    public static void Trigger30BeforeDelete(List<Account> acclst){
        Set<Id> accIds = new Set<Id>();
        
        for(Account acc : acclst){
            accIds.add(acc.Id);
        }
        
        List<Opportunity> opplst = [SELECT Id, AccountId FROM Opportunity WHERE AccountId IN :accIds];
        
        Set<Id> accWithOpps = new Set<Id>();
    	for (Opportunity opp : opplst) {
        	accWithOpps.add(opp.AccountId);
    	}
        
        
        for(Account acc : acclst){
            if(accWithOpps.contains(acc.Id)){
                acc.addError('This Account can\'t be deleted as it has some related opportunities');
            }
        }
    }

