
--1--
Create a trigger on the Contact object that calculates and updates the Total_Contacts__c field on the related Account whenever Contacts are added, updated or deleted. Handle bulk updates efficiently.

trigger ContactTrigger on Contact (after insert, after update, after delete, after undelete) {
    // Set to store Account Ids
    Set<Id> accountIds = new Set<Id>();
    
    // Collect Account Ids from new and old Contact records
    if (Trigger.isInsert || Trigger.isUpdate || Trigger.isUndelete) {
        for (Contact con : Trigger.new) {
            accountIds.add(con.AccountId);
        }
    }
    
    //During an update operation, a Contact's AccountId can change. For example, a Contact might be reassigned from one Account to another. For that reason we are collecting ID again for 'isUpdate'
    if (Trigger.isUpdate || Trigger.isDelete) {
        for (Contact con : Trigger.old) {
            accountIds.add(con.AccountId);
        }
    }

    // Remove null values (in case AccountId is not set)
    accountIds.remove(null);

    // Map to store Account Ids and their contact counts
    Map<Id, Integer> accountContactCountMap = new Map<Id, Integer>();

    // Query the total number of Contacts for each Account
    if (!accountIds.isEmpty()) {
        List<AggregateResult> contactCounts = [
            SELECT AccountId, COUNT(Id) contactCount
            FROM Contact
            WHERE AccountId IN :accountIds
            GROUP BY AccountId
        ];
        
        // Store the contact counts in the map
        for (AggregateResult ar : contactCounts) {
            accountContactCountMap.put((Id)ar.get('AccountId'), (Integer)ar.get('contactCount'));
        }
    }

    // List to store Accounts to be updated
    List<Account> accountsToUpdate = new List<Account>();

    // Add Accounts with their updated contact counts
    for (Id accountId : accountIds) {
        Integer contactCount = accountContactCountMap.containsKey(accountId) ? accountContactCountMap.get(accountId) : 0;
        accountsToUpdate.add(new Account(Id = accountId, Number_Of_Contacts__c = contactCount));
    }

    // Update the Account records
    if (!accountsToUpdate.isEmpty()) {
        update accountsToUpdate;
    }
}






--2--
Write a trigger on the Opportunity object that validates if the StageName is set to "Closed Won", the related Account must have a value for BillingAddress. Prevent the operation if the condition is not met.

trigger Trigger2 on Opportunity (before insert, before update) {
	Set<Id> accIds = new Set<Id>();
    
    if(Trigger.isInsert || Trigger.isUpdate){
        for(Opportunity opp : Trigger.New){
        	accIds.add(opp.AccountId);
    	}
    }
    
   	Map<Id, Account> accMap = new Map<Id, Account>([SELECT Id, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry FROM Account WHERE Id IN : accIds]);
    
    for(Opportunity op : Trigger.New){
        if(op.StageName == 'Closed Won'){
            Account acc = accMap.get(op.AccountId);
            
            if(acc.BillingStreet == null || acc.BillingCity == null || acc.BillingState == null || acc.BillingPostalCode == null || acc.BillingCountry == null) { 
                    op.addError('Cannot mark Opportunity as Closed Won without a complete Billing Address on the related Account.');
            }
            
        }	
    }
    
    
}





--3--
Trigger to find all related opportunities amounts of an account

trigger OpportunityTrigger on Opportunity (before insert, after insert, before update, after update, before delete, after delete, after undelete) {
    Set<Id> accIds = new Set<Id>();
    if(Trigger.isBefore){
        
    }
    if(Trigger.isAfter){
        if(Trigger.isInsert || Trigger.isUndelete){
            for(Opportunity opp : Trigger.New){
                accIds.add(opp.AccountId);
            }
        }
        if(Trigger.isUpdate){
            for(Opportunity opp : Trigger.New){
                if(opp.AccountId != Trigger.oldMap.get(opp.Id).AccountId){
                    accIds.add(opp.AccountId);
                   	accIds.add(Trigger.oldMap.get(opp.Id).AccountId);
                }
                else{
                    accIds.add(opp.AccountId);
                }
            }
        }
        if(Trigger.isDelete){
            for(Opportunity opp : Trigger.Old){
                accIds.add(Trigger.OldMap.get(opp.Id).AccountId);
            }
        }
    }
    
    if(! accIds.isEmpty()){
        List<AggregateResult> aggrList = [SELECT AccountId ids, SUM(Amount) totalAmount FROM Opportunity WHERE AccountId IN :accIds GROUP BY AccountId];
        Map<Id, Account> accMap = new Map<Id, Account>();
        if(! aggrList.isEmpty()){
            for(AggregateResult aggr : aggrList){
                Account acc = new Account(
                Id = (Id)aggr.get('ids'),
                Total_Opportunity_Amount__c = (Decimal)aggr.get('totalAmount')
                );
                accMap.put(acc.Id, acc);
            }
        }
        
        if(! accMap.isEmpty()){
            update accMap.values();
                
        }
    }
}
