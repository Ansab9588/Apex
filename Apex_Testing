# Apex Testing



--1-- 
Create a simple Apex class to test if a date is within a proper range, and if not, returns a date that occurs at the end of the month within the range. You'll copy the code for the class from the Get Ready for the Hands-on Challenge section. Then write unit tests that achieve 100% code coverage.

-Apex Class-
public class VerifyDate {
  //method to handle potential checks against two dates
  public static Date CheckDates(Date date1, Date date2) {
    //if date2 is within the next 30 days of date1, use date2.  Otherwise use the end of the month
    if(DateWithin30Days(date1,date2)) {
      return date2;
    } else {
      return SetEndOfMonthDate(date1);
    }
  }
  //method to check if date2 is within the next 30 days of date1
  private static Boolean DateWithin30Days(Date date1, Date date2) {
    //check for date2 being in the past
    if( date2 < date1) { return false; }
    //check that date2 is within (>=) 30 days of date1
    Date date30Days = date1.addDays(30); //create a date 30 days away from date1
    if( date2 >= date30Days ) { return false; }
    else { return true; }
  }
  //method to return the end of the month of a given date
  private static Date SetEndOfMonthDate(Date date1) {
    Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
    Date lastDay = Date.newInstance(date1.year(), date1.month(), totalDays);
    return lastDay;
  }
}



-Test Class-
@isTest
public class TestVerifyDate{
    
    @isTest
    public static void checkTestDate(){
        Date Date1 = Date.Today().addDays(1);
        Date Date2 = Date.Today().addDays(5);
        Date Date3 = Date.Today().addDays(60);
       
        
        System.assertEquals(Date2, VerifyDate.CheckDates(Date1, Date2));
        System.assertEquals(Date1.addMonths(1).toStartofMonth().addDays(-1), VerifyDate.CheckDates(Date1, Date3));
        
        
    }
}








--2--

Create a simple Apex trigger which blocks inserts and updates to any contact with a last name of 'INVALIDNAME'. You'll copy the code for the class from the Get Ready for the Hands-on Challenge section. Then write unit tests that achieve 100% code coverage.

-Apex_Trigger-
trigger RestrictContactByName on Contact (before insert, before update) {
  //check contacts prior to insert or update for invalid data
  for(Contact c : Trigger.New) {
    if(c.LastName == 'INVALIDNAME') {
      //invalidname is invalid
      c.AddError('The Last Name "'+c.LastName+'" is not allowed for DML');
    }
  }
}



-Test_Class-
@isTest
public class TestRestrictContactByName {
    
	@testSetup
    public static void testData(){
        List<Contact> contacts = new List<Contact>();
        contacts.add(new Contact(LastName='INVALIDNAME'));
        contacts.add(new Contact(LastName='VALIDNAME1'));
        contacts.add(new Contact(LastName='INVALIDNAME2'));
        Database.insert(contacts, False);
    }
    
    @isTest
    public static void testResCon(){
        Contact tC = [SELECT Id, Name, LastName FROM Contact LIMIT 1];
        
        System.assertNotEquals('INVALIDNAME', tc.LastName);
    }
    
    @isTest
    public static void testValidName() {
        // Query for a Contact with a valid name
        Contact validContact = [SELECT Id, LastName FROM Contact WHERE LastName = 'VALIDNAME1' LIMIT 1];

        // Assert that the valid Contact record is returned
        System.assertNotEquals(null, validContact);
    }
}





--3--
Create an Apex class that implements the Database.Batchable interface to update all Lead records in the org with a specific LeadSource.

public class LeadProcessor implements Database.Batchable<sObject> {
    public Database.QueryLocator start(Database.BatchableContext context) {
        return Database.getQueryLocator([SELECT Id, Name FROM Lead]);
    }
    
    public void execute(Database.BatchableContext context, List<Lead> leads) {
        for (Lead lead : leads) {
            lead.LeadSource = 'Dreamforce';
        }
        
        update leads;
    }
    
    public void finish(Database.BatchableContext context) {
        System.debug('Job done!');
    }
}



-Test_Class_
@isTest
private class LeadProcessorTest {
    @isTest
    private static void testLeadProcessor() {
        List<Lead> leads = new List<Lead>();
        
        for (Integer i = 0; i < 200; i++) {
            leads.add(
                new Lead(
                    FirstName = 'Jack',
                    LastName = 'Shephard',
                    Company = 'Salesforce'
                )
            );
        }
        
        insert leads;
        
        Test.startTest();
        LeadProcessor leadProcessor = new LeadProcessor();
        Database.executeBatch(leadProcessor, 200);
        Test.stopTest();
        
        List<Lead> updatedLeads = [SELECT Id
                                   FROM Lead
                                   WHERE LeadSource = 'Dreamforce'];
        
        System.assertEquals(200, updatedLeads.size(), 'Something went wrong! At least 1 Lead have not been updated correctly!');
    }
}

